<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PptxTemplater</name>
    </assembly>
    <members>
        <member name="T:PptxTemplater.PptxParagraph">
             <summary>
             Represents a paragraph inside a PowerPoint file.
             </summary>
             <remarks>
             Could not simply be named Paragraph, conflicts with DocumentFormat.OpenXml.Drawing.Paragraph.
            
             Structure of a paragraph:
             a:p (Paragraph)
              a:r (Run)
               a:t (Text)
            
             <![CDATA[
             <a:p>
              <a:r>
               <a:rPr lang="en-US" dirty="0" smtClean="0"/>
               <a:t>
                Hello this is a tag: {{hello}}
               </a:t>
              </a:r>
              <a:endParaRPr lang="fr-FR" dirty="0"/>
             </a:p>
            
             <a:p>
              <a:r>
               <a:rPr lang="en-US" dirty="0" smtClean="0"/>
               <a:t>
                Another tag: {{bonjour
               </a:t>
              </a:r>
              <a:r>
               <a:rPr lang="en-US" dirty="0" smtClean="0"/>
               <a:t>
                }} le monde !
               </a:t>
              </a:r>
              <a:endParaRPr lang="en-US" dirty="0"/>
             </a:p>
             ]]>
             </remarks>
        </member>
        <member name="M:PptxTemplater.PptxParagraph.ReplaceTag(DocumentFormat.OpenXml.Drawing.Paragraph,System.String,System.String)">
            <summary>
            Replaces a tag inside a paragraph (a:p).
            </summary>
            <param name="p">The paragraph (a:p).</param>
            <param name="tag">The tag to replace by newText, if null or empty do nothing; tag is a regex string.</param>
            <param name="newText">The new text to replace the tag with, if null replaced by empty string.</param>
            <returns><c>true</c> if a tag has been found and replaced, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PptxTemplater.PptxParagraph.RemoveInvalidXMLChars(System.String)">
            <summary>
            Removes characters that are invalid for XML encoding.
            </summary>
            <param name="input">Text to be encoded.</param>
            <returns>Text with invalid XML characters removed.</returns>
            <remarks>
            <see href="http://stackoverflow.com/questions/20762/how-do-you-remove-invalid-hexadecimal-characters-from-an-xml-based-data-source-p">How do you remove invalid hexadecimal characters from an XML-based data source</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxParagraph.GetTexts(DocumentFormat.OpenXml.Drawing.Paragraph)">
            <summary>
            Returns all the texts found inside a given paragraph.
            </summary>
            <remarks>
            If all A.Text in the given paragraph are empty, returns an empty string.
            </remarks>
        </member>
        <member name="T:PptxTemplater.PptxParagraph.TextIndex">
            <summary>
            Associates a A.Text with start and end index matching a paragraph full string (= the concatenation of all A.Text of a paragraph).
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxParagraph.GetTextIndexList(DocumentFormat.OpenXml.Drawing.Paragraph)">
            <summary>
            Gets all the TextIndex for a given paragraph.
            </summary>
        </member>
        <member name="T:PptxTemplater.PptxSlide">
            <summary>
            Represents a slide inside a PowerPoint file.
            </summary>
            <remarks>Could not simply be named Slide, conflicts with DocumentFormat.OpenXml.Drawing.Slide.</remarks>
        </member>
        <member name="F:PptxTemplater.PptxSlide.presentationPart">
            <summary>
            Holds the presentation part.
            </summary>
        </member>
        <member name="F:PptxTemplater.PptxSlide.slidePart">
            <summary>
            Holds the slide part.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxSlide.#ctor(DocumentFormat.OpenXml.Packaging.PresentationPart,DocumentFormat.OpenXml.Packaging.SlidePart)">
            <summary>
            Initializes a new instance of the <see cref="T:PptxTemplater.PptxSlide"/> class.
            </summary>
            <param name="presentationPart">The presentation part.</param>
            <param name="slidePart">The slide part.</param>
        </member>
        <member name="M:PptxTemplater.PptxSlide.GetTexts">
            <summary>
            Gets all the texts found inside the slide.
            </summary>
            <returns>The list of texts detected into the slide.</returns>
            <remarks>
            Some strings inside the array can be empty, this happens when all A.Text from a paragraph are empty
            <see href="http://msdn.microsoft.com/en-us/library/office/cc850836">How to: Get All the Text in a Slide in a Presentation</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.GetTitle">
            <summary>
            Gets the slide title if any.
            </summary>
            <returns>The title or an empty string.</returns>
        </member>
        <member name="M:PptxTemplater.PptxSlide.GetNotes">
            <summary>
            Gets all the notes associated with the slide.
            </summary>
            <returns>All the notes.</returns>
            <remarks>
            <see href="http://msdn.microsoft.com/en-us/library/office/gg278319.aspx">Working with Notes Slides</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.GetTables">
            <summary>
            Gets all the tables associated with the slide.
            </summary>
            <returns>All the tables.</returns>
            <remarks>Assigns an "artificial" id (tblId) to the tables that match the tag.</remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.FindTables(System.String)">
            <summary>
            Finds a table given its tag inside the slide.
            </summary>
            <param name="tag">The tag associated with the table so it can be found.</param>
            <returns>The table or null.</returns>
        </member>
        <member name="T:PptxTemplater.PptxSlide.ReplacementType">
            <summary>
            Type of replacement to perform inside ReplaceTag().
            </summary>
        </member>
        <member name="F:PptxTemplater.PptxSlide.ReplacementType.Global">
            <summary>
            Replaces the tags everywhere.
            </summary>
        </member>
        <member name="F:PptxTemplater.PptxSlide.ReplacementType.NoTable">
            <summary>
            Does not replace tags that are inside a table.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxSlide.ReplaceTag(System.String,System.String,PptxTemplater.PptxSlide.ReplacementType)">
            <summary>
            Replaces a text (tag) by another inside the slide.
            </summary>
            <param name="tag">The tag to replace by newText, if null or empty do nothing; tag is a regex string.</param>
            <param name="newText">The new text to replace the tag with, if null replaced by empty string.</param>
            <param name="replacementType">The type of replacement to perform.</param>
        </member>
        <member name="M:PptxTemplater.PptxSlide.ReplaceTag(PptxTemplater.PptxTable.Cell,PptxTemplater.PptxSlide.ReplacementType)">
            <summary>
            Replaces a text (tag) by another inside the slide given a PptxTable.Cell.
            This is a convenient method that overloads the original ReplaceTag() method.
            </summary>
            <param name="tagPair">The tag/new text, BackgroundPicture is ignored.</param>
            <param name="replacementType">The type of replacement to perform.</param>
        </member>
        <member name="M:PptxTemplater.PptxSlide.ReplacePicture(System.String,System.Byte[],System.String)">
            <summary>
            Replaces a picture by another inside the slide.
            </summary>
            <param name="tag">The tag associated with the original picture so it can be found, if null or empty do nothing.</param>
            <param name="newPicture">The new picture (as a byte array) to replace the original picture with, if null do nothing.</param>
            <param name="contentType">The picture content type: image/png, image/jpeg...</param>
            <remarks>
            <see href="http://stackoverflow.com/questions/7070074/how-can-i-retrieve-images-from-a-pptx-file-using-ms-open-xml-sdk">How can I retrieve images from a .pptx file using MS Open XML SDK?</see>
            <see href="http://stackoverflow.com/questions/7137144/how-can-i-retrieve-some-image-data-and-format-using-ms-open-xml-sdk">How can I retrieve some image data and format using MS Open XML SDK?</see>
            <see href="http://msdn.microsoft.com/en-us/library/office/bb497430.aspx">How to: Insert a Picture into a Word Processing Document</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.ReplacePicture(System.String,System.String,System.String)">
            <summary>
            Replaces a picture by another inside the slide.
            </summary>
            <param name="tag">The tag associated with the original picture so it can be found, if null or empty do nothing.</param>
            <param name="newPictureFile">The new picture (as a file path) to replace the original picture with, if null do nothing.</param>
            <param name="contentType">The picture content type: image/png, image/jpeg...</param>
        </member>
        <member name="M:PptxTemplater.PptxSlide.Clone">
            <summary>
            Clones this slide.
            </summary>
            <returns>The clone.</returns>
            <remarks>
            <see href="http://blogs.msdn.com/b/brian_jones/archive/2009/08/13/adding-repeating-data-to-powerpoint.aspx">Adding Repeating Data to PowerPoint</see>
            <see href="http://startbigthinksmall.wordpress.com/2011/05/17/cloning-a-slide-using-open-xml-sdk-2-0/">Cloning a Slide using Open Xml SDK 2.0</see>
            <see href="http://www.exsilio.com/blog/post/2011/03/21/Cloning-Slides-including-Images-and-Charts-in-PowerPoint-presentations-Using-Open-XML-SDK-20-Productivity-Tool.aspx">See Cloning Slides including Images and Charts in PowerPoint presentations and Using Open XML SDK 2.0 Productivity Tool</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.InsertAfter(PptxTemplater.PptxSlide,PptxTemplater.PptxSlide)">
            <summary>
            Inserts this slide after a given target slide.
            </summary>
            <param name="newSlide">The new slide to insert.</param>
            <param name="prevSlide">The previous slide.</param>
            <remarks>
            This slide will be inserted after the slide specified as a parameter.
            <see href="http://startbigthinksmall.wordpress.com/2011/05/17/cloning-a-slide-using-open-xml-sdk-2-0/">Cloning a Slide using Open Xml SDK 2.0</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.Remove">
            <summary>
            Removes the slide from the PowerPoint file.
            </summary>
            <remarks>
            <see href="http://msdn.microsoft.com/en-us/library/office/cc850840.aspx">How to: Delete a Slide from a Presentation</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.IsShapeATitle(DocumentFormat.OpenXml.Presentation.Shape)">
            <summary>
            Determines whether the given shape is a title.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxSlide.AddPicture(System.Byte[],System.String)">
            <summary>
            Adds a new picture to the slide in order to re-use the picture later on.
            </summary>
            <param name="picture">The picture as a byte array.</param>
            <param name="contentType">The picture content type: image/png, image/jpeg...</param>
            <returns>The image part</returns>
        </member>
        <member name="M:PptxTemplater.PptxSlide.GetIdOfImagePart(DocumentFormat.OpenXml.Packaging.ImagePart)">
            <summary>
            Gets the relationship ID of a given image part.
            </summary>
            <param name="imagePart">The image part.</param>
            <returns>The relationship ID of the image part.</returns>
        </member>
        <member name="M:PptxTemplater.PptxSlide.FindTable(System.Int32)">
            <summary>
            Finds a table (a:tbl) given its "artificial" id (tblId).
            </summary>
            <param name="tblId">The table id.</param>
            <returns>The table or null if not found.</returns>
            <remarks>The "artificial" id (tblId) is created inside FindTables().</remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.RemoveTable(System.Int32)">
            <summary>
            Removes a table (a:tbl) given its "artificial" id (tblId).
            </summary>
            <param name="tblId">The table id.</param>
            <remarks>
            <![CDATA[
            p:graphicFrame
             a:graphic
              a:graphicData
               a:tbl (Table)
            ]]>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxSlide.Save">
            <summary>
            Saves the slide.
            </summary>
            <remarks>
            This is mandatory to save the slides after modifying them otherwise
            the next manipulation that will be performed on the pptx won't
            include the modifications done before.
            </remarks>
        </member>
        <member name="T:PptxTemplater.Pptx">
            <summary>
            Represents a PowerPoint file.
            </summary>
            <returns>Follows the facade pattern.</returns>
        </member>
        <member name="F:PptxTemplater.Pptx.TagPattern">
            <summary>
            Regex pattern to extract tags from templates.
            </summary>
        </member>
        <member name="F:PptxTemplater.Pptx.MimeType">
            <summary>
            MIME type for PowerPoint pptx files.
            </summary>
        </member>
        <member name="M:PptxTemplater.Pptx.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:PptxTemplater.Pptx"/> class.
            </summary>
            <param name="file">The PowerPoint file.</param>
            <param name="access">Access mode to use to open the PowerPoint file.</param>
            <remarks>Opens a PowerPoint file in read-write (default) or read only mode.</remarks>
        </member>
        <member name="M:PptxTemplater.Pptx.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:PptxTemplater.Pptx"/> class.
            </summary>
            <param name="stream">The PowerPoint stream.</param>
            <param name="access">Access mode to use to open the PowerPoint file.</param>
            <remarks>Opens a PowerPoint stream in read-write (default) or read only mode.</remarks>
        </member>
        <member name="M:PptxTemplater.Pptx.Close">
            <summary>
            Closes the PowerPoint file.
            </summary>
            <remarks>
            99% of the time this is not needed, the PowerPoint file will get closed when the destructor is being called.
            </remarks>
        </member>
        <member name="M:PptxTemplater.Pptx.SlidesCount">
            <summary>
            Counts the number of slides.
            </summary>
            <returns>The number of slides.</returns>
            <remarks>
            <see href="http://msdn.microsoft.com/en-us/library/office/gg278331">How to: Get All the Text in All Slides in a Presentation</see>
            </remarks>
        </member>
        <member name="M:PptxTemplater.Pptx.FindSlides(System.String)">
            <summary>
            Finds the slides matching a given note.
            </summary>
            <param name="note">Note to match the slide with.</param>
            <returns>The matching slides.</returns>
        </member>
        <member name="M:PptxTemplater.Pptx.GetThumbnail(System.Drawing.Size)">
            <summary>
            Gets the thumbnail (PNG format) associated with the PowerPoint file.
            </summary>
            <param name="size">The size of the thumbnail to generate, default is 256x192 pixels in 4:3 (160x256 in 16:10 portrait).</param>
            <returns>The thumbnail as a byte array (PNG format).</returns>
            <remarks>
            Even if the PowerPoint file does not contain any slide, still a thumbnail is generated.
            If the given size is superior to the default size then the thumbnail is upscaled and looks blurry so don't do it.
            </remarks>
        </member>
        <member name="M:PptxTemplater.Pptx.GetSlides">
            <summary>
            Gets all the slides inside PowerPoint file.
            </summary>
            <returns>All the slides.</returns>
        </member>
        <member name="M:PptxTemplater.Pptx.GetSlide(System.Int32)">
            <summary>
            Gets the PptxSlide given a slide index.
            </summary>
            <param name="slideIndex">Index of the slide.</param>
            <returns>A PptxSlide.</returns>
        </member>
        <member name="M:PptxTemplater.Pptx.ReplaceTable_One(PptxTemplater.PptxSlide,PptxTemplater.PptxTable,System.Collections.Generic.IList{PptxTemplater.PptxTable.Cell[]})">
            <summary>
            Replaces the cells from a table (tbl).
            Algorithm for a slide template containing one table.
            </summary>
        </member>
        <member name="M:PptxTemplater.Pptx.ReplaceTable_Multiple(PptxTemplater.PptxSlide,PptxTemplater.PptxTable,System.Collections.Generic.IList{PptxTemplater.PptxTable.Cell[]},System.Collections.Generic.List{PptxTemplater.PptxSlide})">
            <summary>
            Replaces the cells from a table (tbl).
            Algorithm for a slide template containing multiple tables.
            </summary>
            <param name="slideTemplate">The slide template that contains the table(s).</param>
            <param name="tableTemplate">The table (tbl) to use, should be inside the slide template.</param>
            <param name="rows">The rows to replace the table's cells.</param>
            <param name="existingSlides">Existing slides created for the other tables inside the slide template.</param>
            <returns>The newly created slides if any.</returns>
        </member>
        <member name="T:PptxTemplater.PptxTable">
             <summary>
             Represents a table inside a PowerPoint file.
             </summary>
             <remarks>
             Could not simply be named Table, conflicts with DocumentFormat.OpenXml.Drawing.Table.
            
             Structure of a table (3 columns x 2 lines):
             p:graphicFrame
              a:graphic
               a:graphicData
                a:tbl (Table)
                 a:tblGrid (TableGrid)
                  a:gridCol (GridColumn)
                  a:gridCol
                  a:gridCol
                 a:tr (TableRow)
                  a:tc (TableCell)
                  a:tc
                  a:tc
                 a:tr
                  a:tc
                  a:tc
                  a:tc
            
             <![CDATA[
             <p:graphicFrame>
               <p:nvGraphicFramePr>
                 <p:cNvPr id="22" name="Tableau 13" title="TableTitle"/>
                 <p:cNvGraphicFramePr>
                   <a:graphicFrameLocks noGrp="1"/>
                 </p:cNvGraphicFramePr>
                 <p:nvPr>
                   <p:extLst>
                   <p:ext uri="{D42A27DB-BD31-4B8C-83A1-F6EECF244321}">
                     <p14:modId xmlns:p14="http://schemas.microsoft.com/office/powerpoint/2010/main" val="1057920305"/>
                   </p:ext>
                   </p:extLst>
                 </p:nvPr>
               </p:nvGraphicFramePr>
               <p:xfrm>
                 <a:off x="4139952" y="836712"/>
                 <a:ext cx="4621104" cy="1538368"/>
               </p:xfrm>
               <a:graphic>
                 <a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/table">
                   <a:tbl>
                     <a:tblPr firstRow="1" bandRow="1">
                       <a:tableStyleId>{5C22544A-7EE6-4342-B048-85BDC9FD1C3A}</a:tableStyleId>
                     </a:tblPr>
                     <a:tblGrid>
                       <a:gridCol w="2743200" />
                       <a:gridCol w="2743200" />
                       <a:gridCol w="2743200" />
                     </a:tblGrid>
                     <a:tr h="370840">
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                     </a:tr>
                     <a:tr h="370840">
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                       <a:tc>
                         <a:txBody>
                           <a:bodyPr />
                           <a:lstStyle />
                           [PptxParagraph]
                         </a:txBody>
                         <a:tcPr />
                       </a:tc>
                     </a:tr>
                   </a:tbl>
                 </a:graphicData>
               </a:graphic>
             </p:graphicFrame>
             ]]>
             </remarks>
        </member>
        <member name="T:PptxTemplater.PptxTable.Cell">
            <summary>
            Represents a cell inside a table (a:tbl).
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.Remove">
            <summary>
            Removes the table from the slide.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.RemoveColumns(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes the given columns.
            </summary>
            <param name="columns">Indexes of the columns to remove.</param>
        </member>
        <member name="M:PptxTemplater.PptxTable.SetTableCellPropertiesWithBackgroundPicture(PptxTemplater.PptxSlide,DocumentFormat.OpenXml.Drawing.TableCellProperties,PptxTemplater.PptxTable.Cell.BackgroundPicture)">
            <summary>
            Sets a background picture for a table cell (a:tc).
            </summary>
            <remarks>
            <![CDATA[
            <a:tc>
             <a:txBody>
              <a:bodyPr/>
              <a:lstStyle/>
              <a:p>
               <a:endParaRPr lang="fr-FR" dirty="0"/>
              </a:p>
             </a:txBody>
             <a:tcPr> (TableCellProperties)
              <a:blipFill dpi="0" rotWithShape="1">
               <a:blip r:embed="rId2"/>
               <a:srcRect/>
               <a:stretch>
                <a:fillRect b="12000" r="90000" t="14000"/>
               </a:stretch>
              </a:blipFill>
             </a:tcPr>
            </a:tc>
            ]]>
            </remarks>
        </member>
        <member name="M:PptxTemplater.PptxTable.ReplaceTag(PptxTemplater.PptxTable.Cell)">
            <summary>
            Replaces a tag inside the table (a:tbl).
            </summary>
            <param name="cell">Contains the tag, the new text and a pciture.</param>
            <returns><c>true</c> if a tag has been found and replaced, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PptxTemplater.PptxTable.ReplaceTag(PptxTemplater.PptxSlide,DocumentFormat.OpenXml.Drawing.TableCell,PptxTemplater.PptxTable.Cell)">
            <summary>
            Replaces a tag inside a given table cell (a:tc).
            </summary>
            <param name="slide">The PptxSlide.</param>
            <param name="tc">The table cell (a:tc).</param>
            <param name="cell">Contains the tag, the new text and a picture.</param>
            <returns><c>true</c> if a tag has been found and replaced, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PptxTemplater.PptxTable.SetRows(System.Collections.Generic.IList{PptxTemplater.PptxTable.Cell[]})">
            <summary>
            Replaces the cells from the table (tbl).
            </summary>
            <returns>The list of remaining rows that could not be inserted, you will have to create a new slide.</returns>
        </member>
        <member name="M:PptxTemplater.PptxTable.ColumnTitles">
            <summary>
            Gets the columns titles as an array of strings.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.ColumnsCount">
            <summary>
            Gets the number of columns inside the table (tbl).
            </summary>
            <returns>The number of columns.</returns>
        </member>
        <member name="M:PptxTemplater.PptxTable.CellsCount">
            <summary>
            Gets the number of cells inside the table (tbl).
            </summary>
            <returns>The number of cells.</returns>
        </member>
        <member name="M:PptxTemplater.PptxTable.CellsCount(DocumentFormat.OpenXml.Drawing.Table)">
            <summary>
            Helper method.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.RowsCount(DocumentFormat.OpenXml.Drawing.Table)">
            <summary>
            Helper method.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.GetRow(DocumentFormat.OpenXml.Drawing.Table,System.Int32)">
            <summary>
            Helper method.
            </summary>
        </member>
        <member name="M:PptxTemplater.PptxTable.GetCell(DocumentFormat.OpenXml.Drawing.TableRow,System.Int32)">
            <summary>
            Helper method.
            </summary>
        </member>
    </members>
</doc>
